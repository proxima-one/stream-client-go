// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: stream_producer/v1alpha1/stream_producer.proto

package stream_producerv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamProducerServiceClient is the client API for StreamProducerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamProducerServiceClient interface {
	CreateProducer(ctx context.Context, in *CreateProducerRequest, opts ...grpc.CallOption) (*CreateProducerResponse, error)
	GetProducer(ctx context.Context, in *GetProducerRequest, opts ...grpc.CallOption) (*GetProducerResponse, error)
	ProduceEvents(ctx context.Context, in *ProduceEventsRequest, opts ...grpc.CallOption) (*ProduceEventsResponse, error)
}

type streamProducerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamProducerServiceClient(cc grpc.ClientConnInterface) StreamProducerServiceClient {
	return &streamProducerServiceClient{cc}
}

func (c *streamProducerServiceClient) CreateProducer(ctx context.Context, in *CreateProducerRequest, opts ...grpc.CallOption) (*CreateProducerResponse, error) {
	out := new(CreateProducerResponse)
	err := c.cc.Invoke(ctx, "/stream_producer.v1alpha1.StreamProducerService/CreateProducer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamProducerServiceClient) GetProducer(ctx context.Context, in *GetProducerRequest, opts ...grpc.CallOption) (*GetProducerResponse, error) {
	out := new(GetProducerResponse)
	err := c.cc.Invoke(ctx, "/stream_producer.v1alpha1.StreamProducerService/GetProducer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamProducerServiceClient) ProduceEvents(ctx context.Context, in *ProduceEventsRequest, opts ...grpc.CallOption) (*ProduceEventsResponse, error) {
	out := new(ProduceEventsResponse)
	err := c.cc.Invoke(ctx, "/stream_producer.v1alpha1.StreamProducerService/ProduceEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamProducerServiceServer is the server API for StreamProducerService service.
// All implementations should embed UnimplementedStreamProducerServiceServer
// for forward compatibility
type StreamProducerServiceServer interface {
	CreateProducer(context.Context, *CreateProducerRequest) (*CreateProducerResponse, error)
	GetProducer(context.Context, *GetProducerRequest) (*GetProducerResponse, error)
	ProduceEvents(context.Context, *ProduceEventsRequest) (*ProduceEventsResponse, error)
}

// UnimplementedStreamProducerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStreamProducerServiceServer struct {
}

func (UnimplementedStreamProducerServiceServer) CreateProducer(context.Context, *CreateProducerRequest) (*CreateProducerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProducer not implemented")
}
func (UnimplementedStreamProducerServiceServer) GetProducer(context.Context, *GetProducerRequest) (*GetProducerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducer not implemented")
}
func (UnimplementedStreamProducerServiceServer) ProduceEvents(context.Context, *ProduceEventsRequest) (*ProduceEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceEvents not implemented")
}

// UnsafeStreamProducerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamProducerServiceServer will
// result in compilation errors.
type UnsafeStreamProducerServiceServer interface {
	mustEmbedUnimplementedStreamProducerServiceServer()
}

func RegisterStreamProducerServiceServer(s grpc.ServiceRegistrar, srv StreamProducerServiceServer) {
	s.RegisterService(&StreamProducerService_ServiceDesc, srv)
}

func _StreamProducerService_CreateProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamProducerServiceServer).CreateProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream_producer.v1alpha1.StreamProducerService/CreateProducer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamProducerServiceServer).CreateProducer(ctx, req.(*CreateProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamProducerService_GetProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamProducerServiceServer).GetProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream_producer.v1alpha1.StreamProducerService/GetProducer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamProducerServiceServer).GetProducer(ctx, req.(*GetProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamProducerService_ProduceEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamProducerServiceServer).ProduceEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream_producer.v1alpha1.StreamProducerService/ProduceEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamProducerServiceServer).ProduceEvents(ctx, req.(*ProduceEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamProducerService_ServiceDesc is the grpc.ServiceDesc for StreamProducerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamProducerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream_producer.v1alpha1.StreamProducerService",
	HandlerType: (*StreamProducerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProducer",
			Handler:    _StreamProducerService_CreateProducer_Handler,
		},
		{
			MethodName: "GetProducer",
			Handler:    _StreamProducerService_GetProducer_Handler,
		},
		{
			MethodName: "ProduceEvents",
			Handler:    _StreamProducerService_ProduceEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stream_producer/v1alpha1/stream_producer.proto",
}
