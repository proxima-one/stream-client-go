// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: stream_consumer/v1alpha1/stream_consumer.proto

package stream_consumerv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamConsumerServiceClient is the client API for StreamConsumerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamConsumerServiceClient interface {
	FindStream(ctx context.Context, in *FindStreamRequest, opts ...grpc.CallOption) (*FindStreamResponse, error)
	FindOffset(ctx context.Context, in *FindOffsetRequest, opts ...grpc.CallOption) (*FindOffsetResponse, error)
	GetStateTransitions(ctx context.Context, in *GetStateTransitionsRequest, opts ...grpc.CallOption) (*GetStateTransitionsResponse, error)
	StreamStateTransitions(ctx context.Context, in *StreamStateTransitionsRequest, opts ...grpc.CallOption) (StreamConsumerService_StreamStateTransitionsClient, error)
}

type streamConsumerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamConsumerServiceClient(cc grpc.ClientConnInterface) StreamConsumerServiceClient {
	return &streamConsumerServiceClient{cc}
}

func (c *streamConsumerServiceClient) FindStream(ctx context.Context, in *FindStreamRequest, opts ...grpc.CallOption) (*FindStreamResponse, error) {
	out := new(FindStreamResponse)
	err := c.cc.Invoke(ctx, "/stream_consumer.v1alpha1.StreamConsumerService/FindStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamConsumerServiceClient) FindOffset(ctx context.Context, in *FindOffsetRequest, opts ...grpc.CallOption) (*FindOffsetResponse, error) {
	out := new(FindOffsetResponse)
	err := c.cc.Invoke(ctx, "/stream_consumer.v1alpha1.StreamConsumerService/FindOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamConsumerServiceClient) GetStateTransitions(ctx context.Context, in *GetStateTransitionsRequest, opts ...grpc.CallOption) (*GetStateTransitionsResponse, error) {
	out := new(GetStateTransitionsResponse)
	err := c.cc.Invoke(ctx, "/stream_consumer.v1alpha1.StreamConsumerService/GetStateTransitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamConsumerServiceClient) StreamStateTransitions(ctx context.Context, in *StreamStateTransitionsRequest, opts ...grpc.CallOption) (StreamConsumerService_StreamStateTransitionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamConsumerService_ServiceDesc.Streams[0], "/stream_consumer.v1alpha1.StreamConsumerService/StreamStateTransitions", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamConsumerServiceStreamStateTransitionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamConsumerService_StreamStateTransitionsClient interface {
	Recv() (*StreamStateTransitionsResponse, error)
	grpc.ClientStream
}

type streamConsumerServiceStreamStateTransitionsClient struct {
	grpc.ClientStream
}

func (x *streamConsumerServiceStreamStateTransitionsClient) Recv() (*StreamStateTransitionsResponse, error) {
	m := new(StreamStateTransitionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamConsumerServiceServer is the server API for StreamConsumerService service.
// All implementations should embed UnimplementedStreamConsumerServiceServer
// for forward compatibility
type StreamConsumerServiceServer interface {
	FindStream(context.Context, *FindStreamRequest) (*FindStreamResponse, error)
	FindOffset(context.Context, *FindOffsetRequest) (*FindOffsetResponse, error)
	GetStateTransitions(context.Context, *GetStateTransitionsRequest) (*GetStateTransitionsResponse, error)
	StreamStateTransitions(*StreamStateTransitionsRequest, StreamConsumerService_StreamStateTransitionsServer) error
}

// UnimplementedStreamConsumerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStreamConsumerServiceServer struct {
}

func (UnimplementedStreamConsumerServiceServer) FindStream(context.Context, *FindStreamRequest) (*FindStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindStream not implemented")
}
func (UnimplementedStreamConsumerServiceServer) FindOffset(context.Context, *FindOffsetRequest) (*FindOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOffset not implemented")
}
func (UnimplementedStreamConsumerServiceServer) GetStateTransitions(context.Context, *GetStateTransitionsRequest) (*GetStateTransitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateTransitions not implemented")
}
func (UnimplementedStreamConsumerServiceServer) StreamStateTransitions(*StreamStateTransitionsRequest, StreamConsumerService_StreamStateTransitionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStateTransitions not implemented")
}

// UnsafeStreamConsumerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamConsumerServiceServer will
// result in compilation errors.
type UnsafeStreamConsumerServiceServer interface {
	mustEmbedUnimplementedStreamConsumerServiceServer()
}

func RegisterStreamConsumerServiceServer(s grpc.ServiceRegistrar, srv StreamConsumerServiceServer) {
	s.RegisterService(&StreamConsumerService_ServiceDesc, srv)
}

func _StreamConsumerService_FindStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamConsumerServiceServer).FindStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream_consumer.v1alpha1.StreamConsumerService/FindStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamConsumerServiceServer).FindStream(ctx, req.(*FindStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamConsumerService_FindOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamConsumerServiceServer).FindOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream_consumer.v1alpha1.StreamConsumerService/FindOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamConsumerServiceServer).FindOffset(ctx, req.(*FindOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamConsumerService_GetStateTransitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateTransitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamConsumerServiceServer).GetStateTransitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream_consumer.v1alpha1.StreamConsumerService/GetStateTransitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamConsumerServiceServer).GetStateTransitions(ctx, req.(*GetStateTransitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamConsumerService_StreamStateTransitions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamStateTransitionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamConsumerServiceServer).StreamStateTransitions(m, &streamConsumerServiceStreamStateTransitionsServer{stream})
}

type StreamConsumerService_StreamStateTransitionsServer interface {
	Send(*StreamStateTransitionsResponse) error
	grpc.ServerStream
}

type streamConsumerServiceStreamStateTransitionsServer struct {
	grpc.ServerStream
}

func (x *streamConsumerServiceStreamStateTransitionsServer) Send(m *StreamStateTransitionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StreamConsumerService_ServiceDesc is the grpc.ServiceDesc for StreamConsumerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamConsumerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream_consumer.v1alpha1.StreamConsumerService",
	HandlerType: (*StreamConsumerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindStream",
			Handler:    _StreamConsumerService_FindStream_Handler,
		},
		{
			MethodName: "FindOffset",
			Handler:    _StreamConsumerService_FindOffset_Handler,
		},
		{
			MethodName: "GetStateTransitions",
			Handler:    _StreamConsumerService_GetStateTransitions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStateTransitions",
			Handler:       _StreamConsumerService_StreamStateTransitions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream_consumer/v1alpha1/stream_consumer.proto",
}
